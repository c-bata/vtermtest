package keys

var (
	Tab       = []byte{0x09}
	Enter     = []byte{0x0D} // CR
	Backspace = []byte{0x7F} // DEL
	Delete    = []byte{0x1B, 0x5B, 0x33, 0x7E}

	Up    = []byte{0x1B, 0x5B, 0x41}
	Down  = []byte{0x1B, 0x5B, 0x42}
	Right = []byte{0x1B, 0x5B, 0x43}
	Left  = []byte{0x1B, 0x5B, 0x44}

	Home     = []byte{0x1B, 0x5B, 0x48}
	End      = []byte{0x1B, 0x5B, 0x46}
	PageUp   = []byte{0x1B, 0x5B, 0x35, 0x7E}
	PageDown = []byte{0x1B, 0x5B, 0x36, 0x7E}

	CtrlA = []byte{0x01}
	CtrlB = []byte{0x02}
	CtrlC = []byte{0x03}
	CtrlD = []byte{0x04}
	CtrlE = []byte{0x05}
	CtrlF = []byte{0x06}
	CtrlG = []byte{0x07}
	CtrlH = []byte{0x08}
	CtrlI = []byte{0x09} // Same as Tab
	CtrlJ = []byte{0x0A} // LF
	CtrlK = []byte{0x0B}
	CtrlL = []byte{0x0C}
	CtrlM = []byte{0x0D} // Same as Enter (CR)
	CtrlN = []byte{0x0E}
	CtrlO = []byte{0x0F}
	CtrlP = []byte{0x10}
	CtrlQ = []byte{0x11}
	CtrlR = []byte{0x12}
	CtrlS = []byte{0x13}
	CtrlT = []byte{0x14}
	CtrlU = []byte{0x15}
	CtrlV = []byte{0x16}
	CtrlW = []byte{0x17}
	CtrlX = []byte{0x18}
	CtrlY = []byte{0x19}
	CtrlZ = []byte{0x1A}

	// Device Status Report (DSR) sequences
	DSR = []byte{0x1B, 0x5B, 0x36, 0x6E} // ESC[6n - Request cursor position
)

func Text(s string) []byte {
	return []byte(s)
}

// Alt returns Alt+key combination
func Alt(key rune) []byte {
	return []byte{0x1B, byte(key)}
}

// AltKeys for common combinations
var (
	AltA = Alt('a')
	AltB = Alt('b')
	AltC = Alt('c')
	AltD = Alt('d')
	AltF = Alt('f')
	AltLeft  = []byte{0x1B, 0x5B, 0x31, 0x3B, 0x33, 0x44}
	AltRight = []byte{0x1B, 0x5B, 0x31, 0x3B, 0x33, 0x43}
)

func F(n int) []byte {
	if n < 1 || n > 24 {
		return nil
	}

	switch n {
	case 1:
		return []byte{0x1B, 0x4F, 0x50}
	case 2:
		return []byte{0x1B, 0x4F, 0x51}
	case 3:
		return []byte{0x1B, 0x4F, 0x52}
	case 4:
		return []byte{0x1B, 0x4F, 0x53}
	case 5:
		return []byte{0x1B, 0x5B, 0x31, 0x35, 0x7E}
	case 6:
		return []byte{0x1B, 0x5B, 0x31, 0x37, 0x7E}
	case 7:
		return []byte{0x1B, 0x5B, 0x31, 0x38, 0x7E}
	case 8:
		return []byte{0x1B, 0x5B, 0x31, 0x39, 0x7E}
	case 9:
		return []byte{0x1B, 0x5B, 0x32, 0x30, 0x7E}
	case 10:
		return []byte{0x1B, 0x5B, 0x32, 0x31, 0x7E}
	case 11:
		return []byte{0x1B, 0x5B, 0x32, 0x33, 0x7E}
	case 12:
		return []byte{0x1B, 0x5B, 0x32, 0x34, 0x7E}
	case 13:
		return []byte{0x1B, 0x5B, 0x31, 0x3B, 0x32, 0x50}
	case 14:
		return []byte{0x1B, 0x5B, 0x31, 0x3B, 0x32, 0x51}
	case 15:
		return []byte{0x1B, 0x5B, 0x31, 0x3B, 0x32, 0x52}
	case 16:
		return []byte{0x1B, 0x5B, 0x31, 0x3B, 0x32, 0x53}
	case 17:
		return []byte{0x1B, 0x5B, 0x31, 0x35, 0x3B, 0x32, 0x7E}
	case 18:
		return []byte{0x1B, 0x5B, 0x31, 0x37, 0x3B, 0x32, 0x7E}
	case 19:
		return []byte{0x1B, 0x5B, 0x31, 0x38, 0x3B, 0x32, 0x7E}
	case 20:
		return []byte{0x1B, 0x5B, 0x31, 0x39, 0x3B, 0x32, 0x7E}
	case 21:
		return []byte{0x1B, 0x5B, 0x32, 0x30, 0x3B, 0x32, 0x7E}
	case 22:
		return []byte{0x1B, 0x5B, 0x32, 0x31, 0x3B, 0x32, 0x7E}
	case 23:
		return []byte{0x1B, 0x5B, 0x32, 0x33, 0x3B, 0x32, 0x7E}
	case 24:
		return []byte{0x1B, 0x5B, 0x32, 0x34, 0x3B, 0x32, 0x7E}
	default:
		return nil
	}
}